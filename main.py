import logging
from markupsafe import Markup
import wikipedia
import re
import requests
from bs4 import BeautifulSoup
import random
from config import *
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.utils.emoji import emojize
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentType
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∂—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.DEBUG)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –≤ Wikipedia
wikipedia.set_lang("ru")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

def get_joke(name=''):
    try:
        # –Ω–∞–π–¥–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å
        r = requests.get('http://bashorg.org/casual')

        # —Ä–∞—Å–ø–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥
        soup = BeautifulSoup(r.content,"html.parser")

        # –ø–æ–ª—É—á–∏–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        d = soup.find_all("div",class_="q")

        # –≤–µ—Ä–Ω–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–ø—É—Å—Ç–∏–≤ 6 —Å—Ç—Ä–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        a = d[0].text.split('\n')
        text = '\n'.join(a[6:])

        # –≤–µ—Ä–Ω–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–π —à—É—Ç–∫–∏
        return text

    # —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫    
    except Exception as e:
        # –∑–∞–∂—É—Ä–Ω–∞–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logging.error(e)

        # –≤–µ—Ä–Ω–µ–º –¥–µ–∂—É—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
        return emojize('–ù–µ –¥–æ —à—É—Ç–æ–∫ —Å–µ–π—á–∞—Å :expressionless:')
    

def get_img_url(name=''):
    try:
        # –Ω–∞–π–¥–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å
        response = requests.get('https://yandex.ru/images/search?text='+name)

        # —Ä–∞—Å–ø–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥
        soup = BeautifulSoup(response.content,"html.parser")

        # –ø–æ–ª—É—á–∏–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        links = soup.find_all("img",class_="serp-item__thumb justifier__thumb")

        # –≤—ã–±–µ—Ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
        n = len(links)
        link = links[random.randint(0, n-1)]
        link = link.get("src")
        return "https:" + str(link)

    # —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫    
    except Exception as e:
        # –∑–∞–∂—É—Ä–Ω–∞–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logging.error(e)

        # –≤–µ—Ä–Ω–µ–º –¥–µ–∂—É—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
        return FAIL_URL


# –ß–∏—Å—Ç–∏–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –≤ Wikipedia –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –µ–≥–æ —Ç—ã—Å—è—á–µ–π —Å–∏–º–≤–æ–ª–æ–≤
def get_wiki(s):
    try:
        result = wikipedia.search(s, results = 1)
        wkpage = wikipedia.WikipediaPage(title = result[0])
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É
        wikitext = wkpage.summary
        # # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–æ—á–∫–∞–º
        wikimas=wikitext.split('.')
        # # –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–ï –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏
        wikimas = wikimas[:-1]
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        wikitext2 = ''
        # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –≥–¥–µ –Ω–µ—Ç –∑–Ω–∞–∫–æ–≤ ¬´—Ä–∞–≤–Ω–æ¬ª (—Ç–æ –µ—Å—Ç—å –≤—Å–µ, –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        for x in wikimas:
            if not('==' in x):
                    # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–æ–ª—å—à–µ —Ç—Ä–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –∫ –Ω–∞—à–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Ç–µ—Ä—è–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫ —Ç–æ—á–∫–∏ –Ω–∞ –º–µ—Å—Ç–æ
                if(len((x.strip()))>3):
                   wikitext2=wikitext2+x+'.'
            else:
                break
        # –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π —É–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
        wikitext2=re.sub('\([^()]*\)', '', wikitext2)
        wikitext2=re.sub('\([^()]*\)', '', wikitext2)
        wikitext2=re.sub('\{[^\{\}]*\}', '', wikitext2)
        # –ù–∞–π–¥–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
        img_url = ''
        for img in wkpage.images:
            if img.find('.jpg') >= 0 or img.find('.jpeg') >= 0:
                img_url = '\n' + img
                break
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        return (wikitext2, img_url)
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å –º–æ–¥—É–ª—å wikipedia –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
    except Exception as e:
        logging.error(e)
        return ('–í —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º', '')


def get_news(name):
    NO_NEWS = emojize('–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ :expressionless:')

    try:
        url = 'https://yandex.ru/news/rubric/computers'
        r = requests.get(url)
        soup = BeautifulSoup(r.text, 'html.parser')

        # –ò—â–µ—Ç –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        news = soup.find_all('a', class_='mg-card__link')

        # –í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏ (–≤—Å–µ–≥–æ –∏—Ö 10)
        if len(news) > 0:
            text = '\n'.join([link for link in news])
        else:
            text = NO_NEWS

    except Exception as e:
        logging.error(e) 
        text = NO_NEWS

    return text


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
        types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è', request_contact=True)
    ).add(
        types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è', request_location=True)
    ).add(
        types.KeyboardButton("/fact")
    ).add(
        types.KeyboardButton("/photo")
    )
    await message.reply('–ü—Ä–∏–≤–µ—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π /help, '
                        '—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥!', reply_markup=markup)


@dp.message_handler(commands=['photo'])
async def send_welcome(message: types.Message):
    img_url = get_img_url()
    await message.reply_photo(img_url)

    # with open('data/cat.jpg', 'rb') as photo:
    #     await message.reply_photo(photo, caption=emojize('Cats are here :cat:'))


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    msg = text(bold('–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:'),
               '/voice', '/photo', '/group', '/note', '/file, /testpre', sep='\n')
    await message.reply(msg, parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(regexp='(^cat[s]?$|puss)')
async def cats(message: types.Message):
    with open('data/cats.jpg', 'rb') as photo:
        await message.reply_photo(photo, caption='Cats are here üò∫')


@dp.message_handler(regexp='–Ω–æ–≤–æ—Å—Ç[—å–∏]')
async def news(message: types.Message):
    await message.reply(get_news(message.text))


@dp.message_handler(regexp='—Ç–∞–∫–æ[–π–µ]')
async def wiki(message: types.Message):
    text, img_url = get_wiki(message.text)
    await message.reply('\n'.join((text, img_url)))


@dp.message_handler(regexp='(–ø–æ–∫–∞–∂–∏|—Ñ–æ—Ç(–æ|–∫[—É–∏]))')
async def wiki(message: types.Message):
    img_url = get_img_url(message.text)
    await message.reply_photo(img_url)


@dp.message_handler(regexp='—à—É—Ç–∫[–∞—É]')
async def news(message: types.Message):
    await message.reply(get_joke(message.text))


@dp.message_handler(content_types=types.ContentType.ANY)
async def unknown_message(msg: types.Message):
    message_text = text(emojize('–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å :astonished:'),
                        italic('\n–Ø –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é,'), '—á—Ç–æ –µ—Å—Ç—å',
                        code('–∫–æ–º–∞–Ω–¥–∞'), '/help')
    await msg.reply(message_text, parse_mode=ParseMode.MARKDOWN)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
async def shutdown(dispatcher: Dispatcher):
    logging.info('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞!')
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


if __name__ == '__main__':
    executor.start_polling(dp, on_shutdown=shutdown, skip_updates=True)
