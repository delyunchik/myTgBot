import logging
from config import *
from helpers import *
from weather import *
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.utils.emoji import emojize
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentType
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∂—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    filename='myTgBot.log',
    encoding='utf-8',
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(module)s - %(funcName)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    # markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
    #     types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è', request_contact=True)
    # ).add(
    #     types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è', request_location=True)
    # ).add(
    #     types.KeyboardButton("/help")
    # ).add(
    #     types.KeyboardButton("/photo")
    # )
    await message.reply('–ü—Ä–∏–≤–µ—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π /help, '
                        '—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥!', reply_markup=ReplyKeyboardRemove())


@dp.message_handler(commands=['photo'])
async def send_welcome(message: types.Message):
    img_url = get_img_url()
    await message.reply_photo(img_url)

    # with open('data/cat.jpg', 'rb') as photo:
    #     await message.reply_photo(photo, caption=emojize('Cats are here :cat:'))


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    msg = text(
        '–Ø –º–Ω–æ–≥–æ–µ –∑–Ω–∞—é, –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:',
        bold('–ö—Ç–æ —Ç–∞–∫–æ–π –∫—Ç–æ-–ª–∏–±–æ?') + ' –∏–ª–∏ ' + bold('–ß—Ç–æ —Ç–∞–∫–æ–µ —á—Ç–æ-–ª–∏–±–æ?'),
        '–ú–æ–≥—É ' + bold('–ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ —á–µ–≥–æ —É–≥–æ–¥–Ω–æ'),
        '–†–∞—Å—Å–∫–∞–∑–∞—Ç—å ' + bold('—à—É—Ç–∫—É –¥–Ω—è'),
        '–†–∞—Å—Å–∫–∞–∑–∞—Ç—å ' + bold('–∫–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏'),
        '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ ' + bold('–ø–æ–≥–æ–¥—ã'),
        '–ú–æ–≥—É –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–∞–Ω–Ω—É—é —Å–ø—Ä–∞–≤–∫—É /help',
        sep='\n')
    await message.reply(msg, parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(regexp='(^cat[s]?$|puss)')
async def cats(message: types.Message):
    with open('data/cats.jpg', 'rb') as photo:
        await message.reply_photo(photo, caption='Cats are here üò∫')


@dp.message_handler(regexp='–Ω–æ–≤–æ—Å—Ç[—å–∏]')
async def news(message: types.Message):
    await message.reply(get_news(message.text))


@dp.message_handler(regexp='—Ç–∞–∫–æ[–π–µ]')
async def wiki(message: types.Message):
    text, img_url = get_wiki(message.text)
    await message.reply('\n'.join((text, img_url)))


@dp.message_handler(regexp='(–ø–æ–∫–∞–∂–∏|—Ñ–æ—Ç(–æ|–∫[—É–∏]))')
async def wiki(message: types.Message):
    img_url = get_img_url(message.text)
    await message.reply_photo(img_url)


@dp.message_handler(regexp='—à—É—Ç–∫[–∞—É]')
async def news(message: types.Message):
    await message.reply(get_joke(message.text))


@dp.message_handler(regexp='–ø–æ–≥–æ–¥[–∞—ã—É]')
async def weather(message: types.Message):
    await message.reply(get_weather(message.text))


@dp.message_handler(content_types=types.ContentType.ANY)
async def unknown_message(msg: types.Message):
    message_text = text(emojize('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å :astonished:'),
                        italic('\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é,'), '—á—Ç–æ –µ—Å—Ç—å',
                        code('–∫–æ–º–∞–Ω–¥–∞'), '/help')
    await msg.reply(message_text, parse_mode=ParseMode.MARKDOWN)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
async def shutdown(dispatcher: Dispatcher):
    logging.info('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞!')
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


if __name__ == '__main__':
    executor.start_polling(dp, on_shutdown=shutdown, skip_updates=True)
